/* automatically generated by rust-bindgen 0.69.1 */

pub type JsonnetNativeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        argv: *const *const JsonnetJsonValue,
        success: *mut ::std::os::raw::c_int,
    ) -> *mut JsonnetJsonValue,
>;
pub type JsonnetImportCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        base: *const ::std::os::raw::c_char,
        rel: *const ::std::os::raw::c_char,
        found_here: *mut *mut ::std::os::raw::c_char,
        buf: *mut *mut ::std::os::raw::c_char,
        buflen: *mut usize,
    ) -> ::std::os::raw::c_int,
>;
pub type JsonnetIoWriterCallback = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *const ::std::os::raw::c_void,
        nbytes: usize,
        success: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JsonnetVm {
    pub id: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JsonnetJsonValue {
    pub id: usize,
}
#[test]
fn bindgen_test_layout_JsonnetVm() {
    const UNINIT: ::std::mem::MaybeUninit<JsonnetVm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JsonnetVm>(),
        8usize,
        concat!("Size of: ", stringify!(JsonnetVm))
    );
    assert_eq!(
        ::std::mem::align_of::<JsonnetVm>(),
        8usize,
        concat!("Alignment of ", stringify!(JsonnetVm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JsonnetVm),
            "::",
            stringify!(id)
        )
    );
}
#[test]
fn bindgen_test_layout_JsonnetJsonValue() {
    const UNINIT: ::std::mem::MaybeUninit<JsonnetJsonValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JsonnetJsonValue>(),
        8usize,
        concat!("Size of: ", stringify!(JsonnetJsonValue))
    );
    assert_eq!(
        ::std::mem::align_of::<JsonnetJsonValue>(),
        8usize,
        concat!("Alignment of ", stringify!(JsonnetJsonValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JsonnetJsonValue),
            "::",
            stringify!(id)
        )
    );
}
extern "C" {
    pub fn jsonnet_internal_make_vm_with_id(id: usize) -> *mut JsonnetVm;
}
extern "C" {
    pub fn jsonnet_internal_free_vm(x: *mut JsonnetVm);
}
extern "C" {
    pub fn jsonnet_internal_make_json_with_id(id: usize) -> *mut JsonnetJsonValue;
}
extern "C" {
    pub fn jsonnet_internal_free_json(x: *mut JsonnetJsonValue);
}
extern "C" {
    pub fn jsonnet_internal_execute_native(
        cb: JsonnetNativeCallback,
        ctx: *mut ::std::os::raw::c_void,
        argv: *const *const JsonnetJsonValue,
        success: *mut ::std::os::raw::c_int,
    ) -> *mut JsonnetJsonValue;
}
extern "C" {
    pub fn jsonnet_internal_execute_import(
        cb: JsonnetImportCallback,
        ctx: *mut ::std::os::raw::c_void,
        base: *const ::std::os::raw::c_char,
        rel: *const ::std::os::raw::c_char,
        found_here: *mut *mut ::std::os::raw::c_char,
        msg: *mut *mut ::std::os::raw::c_char,
        buf: *mut *mut ::std::os::raw::c_void,
        buflen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jsonnet_internal_execute_writer(
        cb: JsonnetIoWriterCallback,
        buf: *const ::std::os::raw::c_void,
        nbytes: usize,
        success: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jsonnet_internal_free_string(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn jsonnet_internal_free_pointer(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn jsonnet_internal_realloc(
        vm: *mut JsonnetVm,
        str_: *mut ::std::os::raw::c_char,
        sz: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jsonnet_version() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jsonnet_make() -> *mut JsonnetVm;
}
extern "C" {
    pub fn jsonnet_destroy(vmRef: *mut JsonnetVm);
}
extern "C" {
    pub fn jsonnet_evaluate_snippet(
        vmRef: *mut JsonnetVm,
        filename: *mut ::std::os::raw::c_char,
        code: *mut ::std::os::raw::c_char,
        e: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jsonnet_evaluate_snippet_stream(
        vmRef: *mut JsonnetVm,
        filename: *mut ::std::os::raw::c_char,
        code: *mut ::std::os::raw::c_char,
        e: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jsonnet_evaluate_snippet_multi(
        vmRef: *mut JsonnetVm,
        filename: *mut ::std::os::raw::c_char,
        code: *mut ::std::os::raw::c_char,
        e: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jsonnet_evaluate_file(
        vmRef: *mut JsonnetVm,
        filename: *mut ::std::os::raw::c_char,
        e: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jsonnet_evaluate_file_stream(
        vmRef: *mut JsonnetVm,
        filename: *mut ::std::os::raw::c_char,
        e: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jsonnet_evaluate_file_multi(
        vmRef: *mut JsonnetVm,
        filename: *mut ::std::os::raw::c_char,
        e: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jsonnet_max_stack(vmRef: *mut JsonnetVm, v: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn jsonnet_string_output(vmRef: *mut JsonnetVm, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jsonnet_max_trace(vmRef: *mut JsonnetVm, v: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn jsonnet_jpath_add(vmRef: *mut JsonnetVm, path: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn jsonnet_ext_var(
        vmRef: *mut JsonnetVm,
        key: *mut ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn jsonnet_ext_code(
        vmRef: *mut JsonnetVm,
        key: *mut ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn jsonnet_tla_var(
        vmRef: *mut JsonnetVm,
        key: *mut ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn jsonnet_tla_code(
        vmRef: *mut JsonnetVm,
        key: *mut ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn jsonnet_native_callback(
        vmRef: *mut JsonnetVm,
        name: *mut ::std::os::raw::c_char,
        cb: JsonnetNativeCallback,
        ctx: *mut ::std::os::raw::c_void,
        params: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn jsonnet_import_callback(
        vmRef: *mut JsonnetVm,
        cb: JsonnetImportCallback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn jsonnet_json_extract_string(
        vmRef: *mut JsonnetVm,
        json: *mut JsonnetJsonValue,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jsonnet_json_extract_number(
        vmRef: *mut JsonnetVm,
        json: *mut JsonnetJsonValue,
        out: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jsonnet_json_extract_bool(
        vmRef: *mut JsonnetVm,
        json: *mut JsonnetJsonValue,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jsonnet_json_extract_null(
        vmRef: *mut JsonnetVm,
        json: *mut JsonnetJsonValue,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jsonnet_json_make_string(
        vmRef: *mut JsonnetVm,
        v: *mut ::std::os::raw::c_char,
    ) -> *mut JsonnetJsonValue;
}
extern "C" {
    pub fn jsonnet_json_make_number(vmRef: *mut JsonnetVm, v: f64) -> *mut JsonnetJsonValue;
}
extern "C" {
    pub fn jsonnet_json_make_bool(
        vmRef: *mut JsonnetVm,
        v: ::std::os::raw::c_int,
    ) -> *mut JsonnetJsonValue;
}
extern "C" {
    pub fn jsonnet_json_make_null(vmRef: *mut JsonnetVm) -> *mut JsonnetJsonValue;
}
extern "C" {
    pub fn jsonnet_json_make_array(vmRef: *mut JsonnetVm) -> *mut JsonnetJsonValue;
}
extern "C" {
    pub fn jsonnet_json_array_append(
        vmRef: *mut JsonnetVm,
        arr: *mut JsonnetJsonValue,
        v: *mut JsonnetJsonValue,
    );
}
extern "C" {
    pub fn jsonnet_json_make_object(vmRef: *mut JsonnetVm) -> *mut JsonnetJsonValue;
}
extern "C" {
    pub fn jsonnet_json_object_append(
        vmRef: *mut JsonnetVm,
        obj: *mut JsonnetJsonValue,
        f: *mut ::std::os::raw::c_char,
        v: *mut JsonnetJsonValue,
    );
}
extern "C" {
    pub fn jsonnet_json_destroy(vmRef: *mut JsonnetVm, v: *mut JsonnetJsonValue);
}
extern "C" {
    pub fn jsonnet_fmt_indent(vmRef: *mut JsonnetVm, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jsonnet_fmt_max_blank_lines(vmRef: *mut JsonnetVm, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jsonnet_fmt_string(vmRef: *mut JsonnetVm, c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jsonnet_fmt_comment(vmRef: *mut JsonnetVm, c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jsonnet_fmt_pad_arrays(vmRef: *mut JsonnetVm, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jsonnet_fmt_pad_objects(vmRef: *mut JsonnetVm, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jsonnet_fmt_pretty_field_names(vmRef: *mut JsonnetVm, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jsonnet_fmt_sort_imports(vmRef: *mut JsonnetVm, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jsonnet_fmt_snippet(
        vmRef: *mut JsonnetVm,
        filename: *mut ::std::os::raw::c_char,
        code: *mut ::std::os::raw::c_char,
        e: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jsonnet_fmt_file(
        vmRef: *mut JsonnetVm,
        filename: *mut ::std::os::raw::c_char,
        e: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jsonnet_set_trace_out_callback(vmRef: *mut JsonnetVm, cb: JsonnetIoWriterCallback);
}
extern "C" {
    pub fn jsonnet_realloc(
        vmRef: *mut JsonnetVm,
        buf: *mut ::std::os::raw::c_char,
        sz: usize,
    ) -> *mut ::std::os::raw::c_char;
}
